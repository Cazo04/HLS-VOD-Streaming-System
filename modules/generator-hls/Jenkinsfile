pipeline {
    agent any

    tools { 
      nodejs 'node22'
      terraform 'terraform50319' 
    }

    parameters {
        string(name: 'MODULE_DIR', defaultValue: 'modules/generator-hls',
               description: 'Relative path tới module cần build & test')
    }

    environment {
        REGISTRY      = "192.168.5.10"
        IMAGE_NAME    = "${REGISTRY}/devops/generator-hls"
        IMAGE_TAG     = "${env.GIT_COMMIT.take(7)}"      
        DOCKER_CREDS  = credentials('registry-creds')
        DOCKER_BUILDKIT = '1'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install & Test') {
            steps {
                dir("${params.MODULE_DIR}") {
                    sh '''
                        npm ci
                        npm test
                    '''
                }
            }
        }

        stage('Build Docker image') {
            steps {
                dir("${params.MODULE_DIR}") {
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Test inside Docker') {
            steps {
                sh """
                    docker run --rm \
                        -e NODE_ENV=test \
                        ${IMAGE_NAME}:${IMAGE_TAG} \
                        npm test
                """
            }
        }

    stage('Push if not exists') {
      steps {
        script {
          def status = sh(
            returnStatus: true,
            script: """
              curl -s -o /dev/null -w '%{http_code}' \
                -u "${DOCKER_CREDS_USR}:${DOCKER_CREDS_PSW}" \
                -H 'Accept: application/vnd.docker.distribution.manifest.v2+json' \
                https://${REGISTRY}/v2/devops/generator-hls/manifests/${IMAGE_TAG}
            """
          )
          if (status != 200) {
            sh "echo ${DOCKER_CREDS_PSW} | docker login ${REGISTRY} -u ${DOCKER_CREDS_USR} --password-stdin"
            sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
          } else {
            echo "Image đã có trên registry, bỏ qua bước push."
          }
        }
      }
    }

    stage('Terraform Deploy to K8s') {
    steps {
        dir("${params.MODULE_DIR}/terraform") {

            withCredentials([file(credentialsId: 'kubeconfig-prod',
                                  variable: 'KCFG')]) {
                withEnv(["KUBECONFIG=${KCFG}"]) {

                    sh '''
                      echo "Terraform init"
                      terraform init -input=false

                      echo "Terraform apply"
                      terraform apply -auto-approve \
                        -var="kubeconfig_path=${KUBECONFIG}" \
                        -var="image_tag=${IMAGE_TAG}" \
                        -var="image_repository=${IMAGE_NAME}"

                      echo "Outputs:"
                      terraform output

                      echo "Domain     : $(terraform output -raw domain)"
                      echo "Cluster IP : $(terraform output -raw cluster_ip)"
                      echo "Image      : $(terraform output -raw image_deployed)"
                    '''
                }
            }
        }
    }
}


    }

    post {
        always {
            archiveArtifacts artifacts: 'modules/generator-hls/test-results/**/*', allowEmptyArchive: true
            junit '**/modules/generator-hls/test-results/**/*.xml' 
        }
        success {
            echo "✅ Pipeline finished OK"
        }
        failure {
            echo "❌ Có lỗi – kiểm tra Console Output!"
        }
    }
}
